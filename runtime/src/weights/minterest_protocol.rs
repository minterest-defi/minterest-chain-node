//! Autogenerated weights for minterest_protocol
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-01, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/minterest
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=minterest-protocol
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./runtime/src/weights/minterest_protocol.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for minterest_protocol.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> minterest_protocol::WeightInfo for WeightInfo<T> {
	fn create_pool() -> Weight {
		(74_267_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn deposit_underlying() -> Weight {
		(342_394_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn redeem() -> Weight {
		(613_733_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(41 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn redeem_underlying() -> Weight {
		(629_487_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(41 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn redeem_wrapped() -> Weight {
		(613_217_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(41 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn borrow() -> Weight {
		(573_274_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(41 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn repay() -> Weight {
		(359_991_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn repay_all() -> Weight {
		(358_625_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn repay_on_behalf() -> Weight {
		(367_120_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn transfer_wrapped() -> Weight {
		(586_486_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(42 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn enable_is_collateral() -> Weight {
		(50_260_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn disable_is_collateral() -> Weight {
		(307_849_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(30 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn claim_mnt() -> Weight {
		(1_028_753_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(35 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
}
